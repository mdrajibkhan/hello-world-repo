name: Deploy PHP app to Linux 9 VM (via SSH)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: [ self-hosted ]  # add labels if you use them
    env:
      APP_SRC: php-app
      DEPLOY_PATH: /var/www/html/php-app
      SERVER_NAME: php-app.local

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Ensure the runner has ssh/scp/rsync (RHEL/Ubuntu runners covered)
      - name: Ensure ssh/scp/rsync present on runner
        run: |
          set -e
          need_install=0
          for c in ssh scp rsync; do command -v "$c" >/dev/null || need_install=1; done
          if [ "$need_install" = "1" ]; then
            if command -v dnf >/dev/null 2>&1; then
              sudo dnf -y install openssh-clients rsync
            elif command -v yum >/dev/null 2>&1; then
              sudo yum -y install openssh-clients rsync
            elif command -v apt-get >/dev/null 2>&1; then
              sudo apt-get update
              sudo apt-get install -y openssh-client rsync
            else
              echo "Please install ssh/scp/rsync on the runner"; exit 1
            fi
          fi

      - name: Prepare SSH key & known_hosts
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          # Use printf to avoid an extra newline; strip CRLF if pasted from Windows
          printf "%s" "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          sed -i 's/\r$//' ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Preload host key so StrictHostKeyChecking won't block
          ssh-keyscan -p "${{ secrets.SSH_PORT }}" -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Quick connectivity test (verbose)
        run: |
          set -euo pipefail
          ssh -vvv -o StrictHostKeyChecking=yes -i ~/.ssh/id_rsa -p "${{ secrets.SSH_PORT }}" \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" 'echo "[remote] ssh ok: $(whoami) on $(hostname)"'

      - name: Upload app to remote /tmp (rsync over SSH)
        run: |
          set -euo pipefail
          REMOTE_TMP="/tmp/php-app-${GITHUB_SHA}"
          ssh -i ~/.ssh/id_rsa -p "${{ secrets.SSH_PORT }}" \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
            "rm -rf ${REMOTE_TMP} && mkdir -p ${REMOTE_TMP}"

          rsync -az --delete \
            -e "ssh -i ~/.ssh/id_rsa -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=yes" \
            "${APP_SRC}/" \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${REMOTE_TMP}/"

      - name: Bootstrap & Deploy on remote VM
        run: |
          set -euo pipefail
          REMOTE_TMP="/tmp/php-app-${GITHUB_SHA}"

          ssh -i ~/.ssh/id_rsa -p "${{ secrets.SSH_PORT }}" \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
            "DEPLOY_PATH='${DEPLOY_PATH}' SERVER_NAME='${SERVER_NAME}' REMOTE_TMP='${REMOTE_TMP}' bash -s" <<'REMOTE_EOF'
          set -euo pipefail

          # 1) Install dependencies (idempotent)
          if command -v dnf >/dev/null 2>&1; then PM=dnf; elif command -v yum >/dev/null 2>&1; then PM=yum; else echo "No dnf/yum"; exit 1; fi
          sudo $PM -y install httpd php php-cli php-mysqlnd php-pdo php-gd php-xml php-mbstring rsync curl || true
          sudo $PM -y install policycoreutils-python-utils || true

          # 2) Docroot
          sudo mkdir -p "$DEPLOY_PATH"
          sudo chown -R apache:apache "$DEPLOY_PATH"

          # 3) Apache vhost
          sudo tee /etc/httpd/conf.d/php-app.conf >/dev/null <<CONF
          <VirtualHost *:80>
              ServerName ${SERVER_NAME}
              DocumentRoot ${DEPLOY_PATH}
              <Directory ${DEPLOY_PATH}>
                  AllowOverride All
                  Require all granted
              </Directory>
              ErrorLog /var/log/httpd/php-app-error.log
              CustomLog /var/log/httpd/php-app-access.log combined
          </VirtualHost>
          CONF

          # 4) SELinux contexts
          if command -v semanage >/dev/null 2>&1; then
            sudo semanage fcontext -a -t httpd_sys_content_t "${DEPLOY_PATH}(/.*)?" || true
          fi
          sudo restorecon -R "${DEPLOY_PATH}" || true

          # 5) Deploy files
          sudo rsync -a --delete "${REMOTE_TMP}/" "${DEPLOY_PATH}/"
          sudo chown -R apache:apache "${DEPLOY_PATH}"

          # 6) Apache on
          sudo systemctl enable --now httpd
          sudo systemctl restart httpd

          # 7) Open firewall if needed
          if systemctl is-active --quiet firewalld; then
            sudo firewall-cmd --permanent --add-service=http || true
            sudo firewall-cmd --reload || true
          fi

          # 8) Health check
          curl --fail -sS --resolve "${SERVER_NAME}:80:127.0.0.1" "http://${SERVER_NAME}/" | head -n 20

          # 9) Cleanup
          rm -rf "${REMOTE_TMP}" || true
REMOTE_EOF
